const myObject = {
  name: "m",
  age: 23,
  address: "gurgaon",
};

Object.keys(myObject).forEach((key) => {
  console.log(myObject[key] + ": " + key);
});

for (const key in myObject) {
  // 🚩 You may stumble upon some inherited keys you didn't mean to
}

for (const key in myObject) {
  if (Object.hasOwn(myObject, key)) {
    console.log(myObject[key] + ": " + key);
  }
}

for (const [key, value] of Object.entries(myObject)) {
  // 🙂
}

for (const [key, value] of myMap) {
  // 😍
}

for (const value of myMap.values()) {
  // 🙂
}

for (const key of myMap.keys()) {
  // 🙂
}

var copied = { ...myObject };
var copied = Object.assign({}, myObject);
// But it turns out that maps are just as easy to copy:

var copied = new Map(myMap);

// Map

// Object:
var o = {};
var o = Object.create(null);
o.key = 1;
o.key += 10;
for (let k in o) o[k]++;
var sum = 0;
for (let v of Object.values(m)) sum += v;
if ("key" in o);
if (o.hasOwnProperty("key"));
delete o.key;
Object.keys(o).length;
// Map:
var m = new Map();
m.set("key", 1);
m.set("key", m.get("key") + 10);
m.foreach((k, v) => m.set(k, m.get(k) + 1));
for (let k of m.keys()) m.set(k, m.get(k) + 1);
var sum = 0;
for (let v of m.values()) sum += v;
if (m.has("key"));
m.delete("key");
m.size();

const myMap = new Map(
  Object.entries({
    key: "value",
    keyTwo: "valueTwo",
  })
);

//Set
const set = new Set([1, 2, 3]);

set.add(3);
set.delete(4);
set.has(5);
